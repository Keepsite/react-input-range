{"version":3,"sources":["../../../src/js/input-range/input-range.jsx"],"names":["valueTransformer","InputRange","ariaLabelledby","string","ariaControls","classNames","objectOf","disabled","bool","draggableTrack","formatLabel","func","maxValue","minValue","name","onChangeStart","onChange","isRequired","onChangeComplete","step","number","value","suggestedValue","withActive","singleValueError","props","startValue","node","trackNode","isSliderDragging","removeDocumentMouseUpListener","removeDocumentTouchEndListener","inputRange","disabledInputRange","getClientRect","position","values","getValueFromProps","isMultiValue","positions","getPositionsFromValues","getTrackClientRect","distanceToMin","min","distanceToMax","max","currentValues","hasSuggested","isWithinRange","hasStepDifference","key","updatePositions","getValueFromPosition","transformedValues","getStepValueFromValue","updateValues","shouldUpdate","updateValue","ownerDocument","addEventListener","handleMouseUp","handleTouchEnd","removeEventListener","event","getPositionFromEvent","requestAnimationFrame","updatePosition","prevEvent","stepValue","prevPosition","prevValue","prevStepValue","offset","keyCode","preventDefault","decrementValue","incrementValue","getKeyByPosition","handleInteractionStart","handleInteractionEnd","addDocumentMouseUpListener","addDocumentTouchEndListener","percentages","getPercentagesFromValues","getKeys","map","percentage","slider","handleSliderDrag","handleSliderKeyDown","componentClassName","getComponentClassName","suggestedValues","getSuggestedValueFromProps","isSuggestedMulti","suggestedPercentages","midValue","errorPercentages","errorLabels","errMinStyle","left","errorMinLabel","errMaxStyle","errorMaxLabel","handleKeyDown","handleKeyUp","handleMouseDown","handleTouchStart","hasSingleValueError","handleTrackDrag","handleTrackMouseDown","renderSliders","renderHiddenInputs","Component"],"mappings":"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","file":"input-range.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n      suggestedValue: valuePropType,\n      withActive: PropTypes.bool,\n      singleValueError: PropTypes.number,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n      withActive: true,\n      singleValueError: 0,\n      suggestedValue: 0,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   * @param {number|Range} props.suggestedValue\n   * @param {boolean} [props.withActive = false]\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      if (!this.props.withActive) {\n        return `${this.props.classNames.inputRange} without-active`;\n      }\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  isSuggestedMulti() {\n    return this.hasSuggested() && isObject(this.props.suggestedValue);\n  }\n\n  hasSuggested() {\n    return isObject(this.props.suggestedValue) || this.props.suggestedValue;\n  }\n\n  hasSingleValueError() {\n    return this.props.singleValueError > 0;\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n    case RIGHT_ARROW:\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n    const suggestedValues = valueTransformer.getSuggestedValueFromProps(this.props, this.isSuggestedMulti());\n    const suggestedPercentages = valueTransformer.getPercentagesFromValues(suggestedValues, this.props.minValue, this.props.maxValue);\n    const midValue = (this.props.minValue + this.props.maxValue) / 2;\n    let errorPercentages = { min: null, max: null };\n    let errorLabels = [];\n    if (this.props.singleValueError > 0) {\n      const min = this.props.value - this.props.singleValueError;\n      const max = this.props.value + this.props.singleValueError;\n      errorPercentages = valueTransformer.getPercentagesFromValues({\n        min,\n        max,\n      }, this.props.minValue, this.props.maxValue);\n      const errMinStyle = {\n        left: `${errorPercentages.min * 100}%`,\n      };\n      const errorMinLabel = (\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"errMin\"\n          style={errMinStyle}\n          key={'err-min'}>\n          {min}\n        </Label>\n      );\n      const errMaxStyle = {\n        left: `${errorPercentages.max * 100}%`,\n      };\n      const errorMaxLabel = (\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"errMax\"\n          style={errMaxStyle}\n          key={'err-max'}>\n          {max}\n        </Label>\n      );\n      errorLabels = [errorMinLabel, errorMaxLabel];\n    }\n\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"mid\">\n          {midValue}\n        </Label>\n\n        {errorLabels}\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          suggestedPercentages={suggestedPercentages}\n          withActive={this.props.withActive}\n          isMultiValue={this.isMultiValue()}\n          withError={this.hasSingleValueError()}\n          errorPercentages={errorPercentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]}